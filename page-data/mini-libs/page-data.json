{"componentChunkName":"component---src-templates-blog-post-js","path":"/mini-libs/","result":{"data":{"site":{"siteMetadata":{"title":"Living Life on the Outside","author":"Lucian Buzzo"}},"markdownRemark":{"id":"1d22db34-86db-5458-8c2b-9055f845ba04","excerpt":"Like many developers, I have a few Javascript libraries that turn to again and\nagain. I often find myself loading the full\njQuery and\nlodash…","html":"<p>Like many developers, I have a few Javascript libraries that turn to again and\nagain. I often find myself loading the full\n<a href=\"https://jquery.com/\">jQuery</a> and\n<a href=\"https://lodash.com/\">lodash</a>, libraries only to use a handful of methods from each of them.\nI’d had it in my mind for a while to write a replacement library for lodash that would\nprovide a few utility methods like array mapping and type checking but I had\nnever really got around to actually doing anything. Last Friday I got into\na little back and forth with our new team member Chris Quinn when he sent\nme a 3 line Javascript “framework” that deleted cookies. It got me thinking, how\nmany lines of code do you actually need to make a usable cookie library?</p>\n<p>Ideas started churning and I quickly hacked out a rough version of a tiny cookie\nlibrary - it was pretty sloppy and didn’t work particularly well, but I was\ncaptivated by the idea of seeing what else I could come up with. I tried to get my\nfellow developers involved in a weekend hack, but my cries of “Lib Wars!” fell\non deaf ears:  this was going to be a solo mission.</p>\n<p>Over the bank holiday I wrote a further 7 Javascript libraries. The goal was to keep them as small as\npossible, providing a knife edge of usefulness. I think some of them were\na genuine success, other were pretty miserable failures. I learnt a lot about\nwriting vanilla Javascript and had a lot of fun. None of them have any\ndocumentation and are barely tested beyond the latest version of chrome (and\neven then I’m sure they’re all pretty buggy). I thought I’d detail what I learnt\non each of them here (warning: experienced JS devs may experience extended eye-rolling).</p>\n<h2><a href=\"https://github.com/LucianBuzzo/biscuit\">Biscuit</a></h2>\n<p>Biscuit is the finished version of the cookie lib that kicked it all off. The\nname was stolen from Chris in a friendly attempt to draw him into the failed\n“Lib Wars” hackathon. Embarrassingly, Biscuit exposed my terrible lack of\nunderstanding when it came to getting and setting cookies through Javascript.\nFrom <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie\">MDN</a></p>\n<blockquote>\n<p>document.cookie is an accessor property with native setter and getter functions,\nand consequently is not a data property with a value: what you write is not the\nsame [as when] you read, everything is always mediated by the JavaScript interpreter.</p>\n</blockquote>\n<p>When setting a cookie you need to assign a string value in the form <code class=\"language-text\">KEY=VALUE</code> to the document.cookie\nvariable like so <code class=\"language-text\">document.cookie = 'foo=bar'</code>. Additional parameters can be\nadded by appending them to the string, seperated by <code class=\"language-text\">; </code>. For example, to set a\na cookie to the current domain that will apply to all paths you would use:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">document.cookie = foo=bar; domain=mydomain.com; path=/</code></pre></div>\n<p>I’d previously only used the (excellent)\n<a href=\"https://github.com/carhartl/jquery-cookie\">jquery-cookie</a> plugin, which\nconveniently wraps document.cookie manipulation into something a little easier\nto digest, so this was a bit of an eye-opener for me.\nI think the finished product was a success, it’s not very flexible but it does\nwhat it says on the tin.</p>\n<h2><a href=\"https://bitbucket.org/snippets/gravitywell_ltd/97jq/js\">Balsa</a></h2>\n<p>I have to hold my hands up and admit that I had already written a portion of\nthis library, but I’m including it here because I finished it during my mini hack.\nThe aim of Balsa was to provide my most used methods from the lodash library in\na smaller package. The big headscratcher for me was figuring out how to write\na function that provides methods that can be accessed through dot notation. The\nsolution turned out to be surprisingly straightforward. After defining a function,\nsimply attach methods to it using dot notation.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">function myFunc() {\n  return 'foobar';\n}\n\nmyFunc.hello = function() {\n  return 'world';\n}\n\nmyFunc();\n// -> foobar\n\nmyFunc.hello();\n// -> world</code></pre></div>\n<p>You could also assign methods to a function using brackets.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">function multiply(x, y) {\n  return x * y;\n}\n\nfunction add(x, y) {\n  return x + y;\n}\n\nvar methods = [multiply, add];\n\nmethods.forEach( function( method ) {\n  myFunc[method.name] = method;\n});\n\nmyFunc.add(1, 1);\n// -> 2\n\nmyFunc.multiply(2, 2);\n// -> 4</code></pre></div>\n<p>I’m definitely happy with how Balsa turned out and with some polish and testing\nI could see myself using it in a production site. Working on Balsa really upped\nmy confidence with using function attributes (name, arguments etc) and methods\nlike\n<a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Function/call\"><code class=\"language-text\">call()</code></a>\nand\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply\"><code class=\"language-text\">apply()</code></a>.</p>\n<h2><a href=\"https://bitbucket.org/snippets/gravitywell_ltd/Kde5/awfuljs\">Awful</a></h2>\n<p>A while ago I came across their Stackoverflow question <a href=\"http://stackoverflow.com/questions/3434278/do-dom-tree-elements-with-ids-become-global-variables\">Do DOM tree elements with\nids become global\nvariables?</a>.\nThis highlighted the behaviour where giving an element an id attribute\nadds it to it’s parent window element. E.g.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;h1 id=\"title\">A page title&lt;/h1>\n&lt;script>\n  alert(window.title.innerText); // -> 'A page title'\n&lt;/script></code></pre></div>\n<p>I thought it would be fun to try and wrap this up into a data binding framework\nbut it wasn’t particularly successful. Changing the values of elements through\nthe global namespace was already too easy - wrapping it in another Javascript\nfunction just didn’t make any sense. If you can come up with an interesting\nway to use this behaviour <a href=\"https://bitbucket.org/lbuzzo/awful-js/\">send me a pull\nrequest</a>!.</p>\n<h2><a href=\"https://github.com/LucianBuzzo/pantry\">Pantry</a></h2>\n<p>This is a simple alternative to HTML5 storage that stores data as JSON in\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/name\"><code class=\"language-text\">window.name</code></a>.\nWriting Pantry was quick and fun, I didn’t learn much but it was good exercise\nin writing concise functions. I’d be interested in doing some testing and seeing\nhow practical this is as a lightweight method of storing small amounts of application data.</p>\n<h2><a href=\"https://github.com/LucianBuzzo/quentin\">Quentin</a></h2>\n<p>Recently I’ve found myself using jQuery for changing CSS classes and DOM\ntraversal (<code class=\"language-text\">find</code>, <code class=\"language-text\">parents</code>, <code class=\"language-text\">children</code> etc). I wrote Quentin as a replacement\nfor jQuery that would provide these functions for me in a smaller package (2.4KB minified).\nI used\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelectorAll\"><code class=\"language-text\">querySelectorAll</code></a>\nto retrieve arrays of matched elements. The\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/NodeList\">NodeList</a> returned\nis converted to an array which then has the Quentin methods applied to it.\nI was keen to have jQuery style chaining of methods e.g:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$('ul').find('li').first().addClass('active')</code></pre></div>\n<p>This proved to be particularly tricky. My solution was to use a helper function\nto assign the Quentin methods to a provided collection. If the return value\nfrom the Quentin method could have other Quentin methods applied to it, then\nI use the helper to attach those functions before returning a value.\nThe helper function utilises\n”<a href=\"https://javascriptweblog.wordpress.com/2010/04/05/curry-cooking-up-tastier-functions/\">currying</a>”\nwith the help of a method borrowed from the handsome and generous <a href=\"https://javascriptweblog.wordpress.com/\">Angus\nCroll</a>.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">var methods = [\n  addClass, removeClass, hasClass, find, first, last, eq, data, siblings,\n  parent, children, toggleClass\n];\n\nfunction wrapMethods(collection) {\n  console.log(collection);\n  methods.forEach(function(method) {\n    collection[method.name] = method.curry(collection);\n  });\n  collection.find = find.curry(collection);\n  return collection;\n}</code></pre></div>\n<p>It’s not particularly pretty or performant, but it does work! I will most likely\nrevisit Quentin in the future and try to improve its processing speed.</p>\n<p>Overall I’m really pleased with how Quentin turned out. I really recommend\ntrying out a jQuery-less approach to DOM selectors if you haven’t before.</p>\n<h2><a href=\"https://github.com/LucianBuzzo/loadly\">Loadly</a></h2>\n<p>Loadly is inspired by <a href=\"http://glench.com/hash\">Glen Chiacchieri</a> and the\n<a href=\"https://github.com/chriso/cli\">cli</a> node module. It provides a progress bar and\na spinner that are displayed in the browser’s URL bar using a hash fragment.\nI experimented with using <code class=\"language-text\">document.title</code> to display the loader which also had\nsome interesting effects.</p>\n<p>It’s fun and hacky and probably shouldn’t be used anywhere serious!</p>\n<h2><a href=\"https://github.com/LucianBuzzo/enbasic-js\">EnBasic</a></h2>\n<p><a href=\"http://ogden.basic-english.org/\">Ogden’s basic english</a> is a list of 850 words\nthat, when learnt, <em>“are sufficient for ordinary communication in idiomatic\nEnglish”</em>. The <a href=\"http://ogden.basic-english.org/word2000.html\">combined word list</a>\nextends the original 850 words to around 2000, providing and approximate minimum\nstandard English world list that, when learnt, should allow a student to\nproceed on their own without difficulty.\nI liked the idea of building a tool that could check text content against this\nword list and “mark” words that are not considered <em>Basic English</em>. I could then\nreplace these words with text that would, hopefully, be easier to understand for\npeople whose first language is not English.\nRegular expressions alongside the string methods <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/match\"><code class=\"language-text\">match()</code></a>\nand\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/EXSLT/regexp/replace\"><code class=\"language-text\">replace</code></a>\nwere the key to making EnBasic work.\nEnBasic is essentially a spelling checker and could be easily adapted to run checks\nagainst any list of words.</p>\n<h2><a href=\"https://github.com/LucianBuzzo/luigi\">Luigi</a></h2>\n<p>Luigi provides an itty bitty replacement for my most used jQuery ajax methods.\nI was suprised at how simple it was to implement basic get requests in vanilla Javascript.\nPOST request were a little trickier, so I went with the straightforward method\nof sending payload data as JSON.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">function post(url, data, callback) {\n  var req = new XMLHttpRequest();\n  req.onload = function() {\n    callback(req.responseText);\n  };\n  var segments = [];\n  req.open('post', url, true);\n  req.setRequestHeader('Content-Type', 'application\\/json');\n  req.send(JSON.stringify(data));\n  return req;\n}</code></pre></div>\n<p>One of my favourite methods from Luigi is <code class=\"language-text\">pickHTML</code>. Its behaviour is very\nsimilar to <a href=\"https://api.jquery.com/load/\"><code class=\"language-text\">jQuery.load()</code></a>, but simply returns\nthe HTML string instead of inserting it into the DOM. The regex used in this\nmethod is sourced from the must read article <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/HTML_in_XMLHttpRequest\">HTML in\nXMLHttpRequest</a>\non MDN.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">function pickHTML(html, elementId) {\n  var regexp = new RegExp(\"&lt;(?!\\!)\\\\s*([^\\\\s>]+)[^>]*\\\\s+id\\\\=[\\\"\\']\" + elementId + \"[\\\"\\'][^>]*>\" ,\"i\");\n  var res = regexp.exec(html);\n  console.log(res);\n  return res ? (new RegExp('(?:(?:.(?!&lt;\\\\s*' + res[1] + '[^>]*[>]))*.?&lt;\\\\s*' + res[1] + '[^>]*[>](?:.(?!&lt;\\\\s*\\/\\\\s*' + res[1] + '\\\\s*>))*.?&lt;\\\\s*\\/\\\\s*' + res[1] + '\\\\s*>)*(?:.(?!&lt;\\\\s*\\/\\\\s*' + res[1] + '\\\\s*>))*.?', 'i')).exec(html.slice(html.indexOf(res[0]) + res[0].length))[0] || '' : '';\n}</code></pre></div>\n<p>Browser support for Luigi seems pretty solid and I think with a little more\nwork and polish it could be viable for production use.</p>\n<h2><a href=\"https://bitbucket.org/snippets/gravitywell_ltd/yLBA\">ThickFrames</a></h2>\n<p>This was originally going to be a <a href=\"http://glazkov.com/2011/01/14/what-the-heck-is-shadow-dom/\">Shadow DOM</a>\nutility wrapper for web components until I saw the\n<a href=\"http://caniuse.com/#feat=shadowdom\">caniuse.com</a> page for Shadow DOM. I wasn’t\nkeen on using a polyfill and I didn’t want to use technology that wasn’t\nimplemented in the majority of browsers, so I went with iframes.\nMy first attempt looked something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;div data-role=\"frame\" data-source=\"some/component.html\">&lt;/div>\n\n&lt;script>\n  function init(node) {\n    var nodes = toArray(document.querySelectorAll('[data-role=\"frame\"]'));\n    nodes.forEach(function(node) {\n      node.innerHTML = '&lt;iframe src=\"' + node.dataset.source + '\">&lt;/iframe>';\n    });\n  }\n&lt;/script></code></pre></div>\n<p>This immediately presented three problems I wanted to solve:</p>\n<ul>\n<li>iframes are automatically set to a static width and height which screws up the\npage’s layout and displays scrollbars everywhere.</li>\n<li>Scripts inside the iframes can’t access global variables in the parent window</li>\n<li>CSS styles declared in the parent window don’t get applied inside the iframes</li>\n</ul>\n<p>For the first issue, I wrote a small function that sets the iframe’s height to that of its internal\n<code class=\"language-text\">document</code> element’s <code class=\"language-text\">scrollHeight</code> attribute. As the <code class=\"language-text\">scrollHeight</code> value can\nsometimes return a decimal value, I round it up and add 1 pixel to make sure we\ndon’t see any scroll bars.</p>\n<p>Injecting Javascript global variables from the parent window and making them\navailable on load had me stumped until I realized that I could create “empty”\niframes by not giving them a <code class=\"language-text\">src</code> attribute (this is a method used by a lot of\nWYSIWYG editors to isolate styles). After creating the empty iframe I can access\nits <code class=\"language-text\">contentWindow</code> property and assign any variables I want before injecting\nHTML content using\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Document/write\"><code class=\"language-text\">document.write()</code></a>.</p>\n<p>Applying CSS styles is a little bit brutal and involves using\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Node/cloneNode\"><code class=\"language-text\">cloneNode()</code></a>\nto copy styles out of the parent window into the iframe, with any external files\nhopefully being served by the browser cache!</p>\n<p>I’m keen on continuing the development of ThickFrames as I think it shows some promise.\nI definitely need to make a few changes, for example removing the use of\n<code class=\"language-text\">data-role</code> to prevent any unintentional conflict with the <a href=\"http://www.w3.org/TR/wai-aria/roles\">ARIA role\nmodel</a>.</p>\n<p>All in all I had a bunch of fun writing all of these and the experience has\ndeepened my understanding of front end web development and really\nboosted my confidence in writing Javascript unaided by libraries.\nI will continue to work on these as side projects, hopefully adding\ndocumentation and unit tests!</p>\n<p>Bitbucket repositories for all of the libraries I’ve talked about above are listed here:</p>\n<ul>\n<li><a href=\"https://bitbucket.org/lbuzzo/biscuit-js/\">Biscuit</a></li>\n<li><a href=\"https://bitbucket.org/lbuzzo/Balsa\">Balsa</a></li>\n<li><a href=\"https://bitbucket.org/lbuzzo/awful-js/\">Awful</a></li>\n<li><a href=\"https://bitbucket.org/lbuzzo/pantry-js/\">Pantry</a></li>\n<li><a href=\"https://bitbucket.org/lbuzzo/quentin-js/\">Quentin</a></li>\n<li><a href=\"https://bitbucket.org/lbuzzo/loadly-js\">Loadly</a></li>\n<li><a href=\"https://bitbucket.org/lbuzzo/enbasic-js\">EnBasic</a></li>\n<li><a href=\"https://bitbucket.org/lbuzzo/luigi-js\">Luigi</a></li>\n<li><a href=\"https://bitbucket.org/lbuzzo/frames/\">ThickFrames</a></li>\n</ul>","frontmatter":{"title":"Writing bad Javascript micro libraries","date":"May 27, 2015"}}},"pageContext":{"slug":"/mini-libs/","previous":{"fields":{"slug":"/drupal-field-deployment/"},"frontmatter":{"title":"How to painlessly deploy Drupal fields"}},"next":{"fields":{"slug":"/json-schema-filtering/"},"frontmatter":{"title":"Definitions for filtering properties in JSON schema"}}}},"staticQueryHashes":[],"slicesMap":{}}