{"data":{"site":{"siteMetadata":{"title":"Lucian Buzzo","author":"Lucian Buzzo"}},"markdownRemark":{"id":"2dafabbe-4736-5f65-9f10-24f59101c8d8","excerpt":"In Drupal 7, deploying new fields from a development environment onto a production server can\nbe a tricky and time consuming business…","html":"<p>In Drupal 7, deploying new fields from a development environment onto a production server can\nbe a tricky and time consuming business.\nImagine, the following scenario:</p>\n<ul>\n<li>A client requests a new subtitle text field on the sites product nodes, “for better integration of cross-selling marketing\nsolutions”.</li>\n<li>You create the field in your development environment (MAMP, XAMP, VM etc) by firing up Chrome and clicking though the GUI.</li>\n<li>You check to make sure it all looks good, adding any additional styles or\ntemplating.</li>\n<li>Happy with the changes, you transfer your new styles and template changes to\nthe production server and then login and faithfully replicate creating the\nnew subtitle text field on the live site.</li>\n</ul>\n<p>This process of copying changes across would probably involve putting two browser\nwindows side by side, one on the development site and one on the production\nsite and making sure that all of the field settings match.</p>\n<p><img src=\"/blog/field-creation-146d6a285bd0027af1cb85cad4863fa1.gif\" alt=\"Creating a field in the gui...\"></p>\n<p>Manually recreating fields on a production server is a tedious and error prone\nbusiness, especially when faced with the prospect of creating multiple new fields.\nIdeally this process should be automated and completed in as few steps as possible.</p>\n<p>Much of the site configuration in Drupal 7 is heavily baked into the site’s\ndatabase and can be particularly cryptic to unravel. A common way of getting this\nconfiguration into code (and therefore under version control and easily\ndeployable) is with the use of\nthe <a href=\"https://www.drupal.org/project/features\">Features</a> and <a href=\"https://www.drupal.org/project/strongarm\">Strongarm</a> modules, but for me this isn’t always\na viable option.</p>\n<p>The process of using Features and Strongarm to deploy updates\nis not simple and requires you to split the functionality of your site into\n<em>self-contained</em> parts of code and configuration, which can be a length and\nchallenging process, especially when working on a site that doesn’t\nuse this method for deployment.</p>\n<p>My preferred approach in these situations is to\nuse a site deployment module. If you’re not familiar with creating a custom\nmodule, take a look through the <a href=\"https://www.drupal.org/project/examples\">example modules</a> source code and the\nexcellent <a href=\"https://www.drupal.org/developing/modules/7\">developer guide</a> on drupal.org.\nIn short, a site deployment module is a custom\nmodule that utilises a <code class=\"language-text\">.install</code> file to incrementally update a site. These\nupdates are run by implementing <a href=\"https://api.drupal.org/api/drupal/modules%21system%21system.api.php/function/hook_update_N/7\">hook<em>update</em>N</a>, where N is the modules\ncurrent update number. A basic <code class=\"language-text\">.install</code> file for a site deployment module\ncan be seen on the <a href=\"http://dcycleproject.org/blog/65/basic-install-file-deployment-module\">dcycle</a> site (a fantastic resource for Drupal automation snippets).\nIf I were to create a new module called “mysite_deploy” containing this code:</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token comment\">/**\n * Example update function that disables Overlay\n */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">mysite_deploy_update_7001</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// some people don't like overlay...</span>\n  <span class=\"token function\">module_disable</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'overlay'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>I could then push the module code to my production server, enable this module\nthrough the GUI and then run update.php by clicking on the “update script” link\non the modules page. The function <code class=\"language-text\">mysite_deploy_update_7001</code> would then run and\nthe overlay module would be disabled.</p>\n<p>Using this method to create a new field is surprisingly tricky. Firstly you need\nto create the new field using <a href=\"https://api.drupal.org/api/drupal/modules!field!field.crud.inc/function/field_create_field/7\"><code class=\"language-text\">field_create_field</code></a>, passing\nin a valid “field definition array”. The you will need to create an instance for\neach place that the new field is used using <a href=\"https://api.drupal.org/api/drupal/modules%21field%21field.crud.inc/function/field_create_instance/7\"><code class=\"language-text\">field_create_instance</code></a>, this\ntime using a “field instance definition array”.</p>\n<p>For me, this is a daunting task. The information required to create a new field\nis as confusing as it is diverse and becomes even more complicated when your\ntrying to deploy a non-standard field such as <a href=\"https://www.drupal.org/project/entityreference\">entity reference</a>.\nI’m forever forgetting what “widget type” I need to be using and what\n“cardinality” actually means.</p>\n<p>Luckily all this information is available through other Drupal API functions,\n<em>if the field has already been created</em>. Using the two functions <a href=\"https://api.drupal.org/api/drupal/modules!field!field.info.inc/function/field_info_field/7\"><code class=\"language-text\">field_info_field</code></a>\nand <a href=\"https://api.drupal.org/api/drupal/modules!field!field.info.inc/function/field_info_instance/7\"><code class=\"language-text\">field_info_instance</code></a>, I can add something like this to my themes\n<code class=\"language-text\">template.php</code> and get all the information I need (as long as I can figure out what my entity type and bundle is).</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token variable\">$fieldName</span> <span class=\"token operator\">=</span> <span class=\"token single-quoted-string string\">'field_fancy_marketing_text'</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$fieldInfo</span> <span class=\"token operator\">=</span> <span class=\"token function\">field_info_field</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$fieldName</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$bundle</span> <span class=\"token operator\">=</span> <span class=\"token single-quoted-string string\">'product'</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$entityType</span> <span class=\"token operator\">=</span> <span class=\"token single-quoted-string string\">'node'</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$fieldInstance</span> <span class=\"token operator\">=</span> <span class=\"token function\">field_info_instance</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$entityType</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$fieldName</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$bundle</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">print_r</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$fieldInfo</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">print_r</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$fieldInstance</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The problem with this method is that it’s particularly brutal (<a href=\"http://php.net/manual/en/function.print-r.php\"><code class=\"language-text\">print_r()</code></a> in\ntemplate.php?) and I still need to format the printed arrays into valid PHP.\nUsing <a href=\"http://php.net/manual/en/function.var-export.php\"><code class=\"language-text\">var_export</code></a> instead of <code class=\"language-text\">print_r</code> helps but it all still feels a bit\nclunky. It’s not fast and I’m having to edit unrelated files to get the\ninformation I need.</p>\n<p>A better solution for me was to use a <a href=\"http://www.drush.org/en/master/\">Drush</a> script. If you haven’t come\nacross Drush before, it is a command line tool that can bootstrap and interface\nwith Drupal installations in various ways, from clearing caches to updating\nmodules. I highly recommend it, it’s become an incredibly valuable part of my\nDrupal development toolkit.</p>\n<p>After creating a field through the GUI on my development site, I can run the\nDrush script from the command line, providing the field’s machine name as an\nargument. The script pretty prints code that I can then\ncopy and paste into a <code class=\"language-text\">hook_update_N</code> function.\nThe script uses the provided field name to call <code class=\"language-text\">field_info_field</code> and\n<code class=\"language-text\">field_info_instance</code>, fetching the necessary field definition and instance\ndefinition arrays. These arrays are then beautified and output to the command line\nusing the <a href=\"https://php.net/manual/en/language.types.string.php#language.types.string.syntax.heredoc\">heredoc style</a>. This script can be used ‘as is’ as long as it it’s\nrun from inside a Drupal installation directory.</p>\n<p>I’ve posted the complete annotated script as a <a href=\"https://gist.github.com/LucianBuzzo/d892c70d045b9ce32be049ee3d0e143a\">GitHub gist</a>.</p>\n<p>I love this little drush script, but for me it was still bothersome that I had\nto drop out of the <code class=\"language-text\">.install</code> file I was working on, run the script and copy and\npaste the output. So I wrote a Vim plugin!</p>\n<p><img src=\"/blog/fieldexport-plugin-e13394f177a8e1cb4a8874e5a6195b93.gif\" alt=\"Drupal field export vim plugin\"></p>\n<p>Using this plugin I can type the machine name of a field, then go to normal mode\nand execute the function <code class=\"language-text\">DrupalExportField</code> (or map the function call to\na leader key - in the example above I’m using the mapping <code class=\"language-text\">&lt;Leader&gt;def</code>). The\nword under the cursor is then replaced with the PHP code generated by the drush\nscript. The code written into the vim buffer can have indentation that doesn’t\nmatch the rest of your file, but by executing the normal mode command <code class=\"language-text\">=i{</code> at\nthe end of the function we can automagically neaten up the spacing inside the\ncurrent code block.</p>\n<p>If you like, you can copy and paste the code below into your .vimrc file or\nalternatively you can download the plugin from GitHub <a href=\"https://github.com/LucianBuzzo/vim-drupal-field-export\">here</a>.</p>\n<div class=\"gatsby-highlight\" data-language=\"vim\"><pre class=\"language-vim\"><code class=\"language-vim\"><span class=\"token comment\">\" Get the absolute path of this vimscript</span>\n<span class=\"token keyword\">let</span> s<span class=\"token punctuation\">:</span><span class=\"token builtin\">path</span> <span class=\"token operator\">=</span> <span class=\"token function\">fnamemodify</span><span class=\"token punctuation\">(</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token function\">expand</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;sfile>:p'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">':h'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">function</span><span class=\"token operator\">!</span> <span class=\"token function\">DrupalExportField</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">\" Get the word underneath the cursor</span>\n  <span class=\"token keyword\">let</span> fieldName <span class=\"token operator\">=</span> <span class=\"token function\">expand</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;cword>\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">\" Get the root path of the current Drupal installation</span>\n  <span class=\"token keyword\">let</span> drupalRoot <span class=\"token operator\">=</span> <span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"drush eval 'echo getcwd()'\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">\" Execute the drush script (the script should be stored relative to this functions absolute path)</span>\n  <span class=\"token keyword\">let</span> exportCode <span class=\"token operator\">=</span> <span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">'drush --root='</span> <span class=\"token operator\">.</span> drupalRoot <span class=\"token operator\">.</span> <span class=\"token string\">' '</span> <span class=\"token operator\">.</span> s<span class=\"token punctuation\">:</span><span class=\"token builtin\">path</span> <span class=\"token operator\">.</span> <span class=\"token string\">'/fieldexport.drush.php --field='</span> <span class=\"token operator\">.</span> fieldName<span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">\" Switch to paste mode</span>\n  <span class=\"token keyword\">set</span> <span class=\"token builtin\">paste</span>\n  <span class=\"token comment\">\" Write the export code to the buffer, then neaten up the indentation</span>\n  execute <span class=\"token string\">\"normal! mqciw\\&lt;F10>\"</span> <span class=\"token operator\">.</span> exportCode <span class=\"token operator\">.</span> <span class=\"token string\">\"\\&lt;F10>\\&lt;esc>'q=i{\"</span>\n  <span class=\"token comment\">\" Exit paste mode</span>\n  <span class=\"token keyword\">set</span> <span class=\"token builtin\">nopaste</span>\n<span class=\"token keyword\">endfunction</span></code></pre></div>","frontmatter":{"title":"How to painlessly deploy Drupal fields","date":"April 29, 2015"}}},"pageContext":{"slug":"/drupal-field-deployment/","previous":{"fields":{"slug":"/terminal-improvement-3/"},"frontmatter":{"title":"How to improve your Mac’s terminal part 3 - changing prompt in an SSH session"}},"next":{"fields":{"slug":"/mini-libs/"},"frontmatter":{"title":"Writing bad Javascript micro libraries"}}}}